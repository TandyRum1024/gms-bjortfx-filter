<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
    björtFX retro crt effect example
    ZIK@MMXX
*/

/// Window settings
winWid = 800;
winHei = 600;
winTargetW = 800;
winTargetH = 600;
effectsSurface = surface_create(winWid, winHei);

/// Create shader FX handler
instance_create(0, 0, oBJORTFX);

/// Check for shader compatibility
var _shaderok = oBJORTFX.filterSupported;
_shaderok &amp;= shader_is_compiled(shd_misc_bg);
if (!_shaderok)
{
    show_message("Whoops, seems like the program has failed to compile the shaders...#This program requires a graphics card that supports Shaders!#(You could also, install / update your DirectX drivers and try again to see if it works.)");
    game_end();
}

/// State of the demo
enum eDEMO_STATE
{
    DEFAULT = 0,
    CUSTOM,
}
demoState = eDEMO_STATE.DEFAULT;
demoBGList = iui_pack(-1, bgTest1, bgTest2, bgTest3, bgTest4, bgTest5, bgTest6);
demoBGCurrent = -1;
demoBGIdx = 0;

demoCustomBGDir = "";
demoCustomBG = -1;

/// Init the UI
iui_init();
UIScale = 1.0;
UIMsg = "";
UIMsgCtr = 0;

draw_set_font(fntConsolas);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update window size
var _winwid = window_get_width();
var _winhei = window_get_height();
if ((_winwid != winWid ||
    _winhei != winHei) &amp;&amp;
    _winwid != 0 &amp;&amp;
    _winhei != 0)
{
    // Update window resolution and UI scale
    winWid = _winwid;
    winHei = _winhei;
    UIScale = clamp(winWid / winTargetW, 1.0, winHei / winTargetH);
    
    // Update the filter handler's resolutions
    oBJORTFX.surfaceScreenWid = _winwid;
    oBJORTFX.surfaceScreenHei = _winhei;
    oBJORTFX.surfaceDownscaledWid = _winwid &gt;&gt; oBJORTFX.surfaceDownscaleFactor;
    oBJORTFX.surfaceDownscaledHei = _winhei &gt;&gt; oBJORTFX.surfaceDownscaleFactor;
    
    // Resize the application surface &amp; view
    surface_resize(application_surface, winWid, winHei);
    display_set_gui_size(winWid, winHei);
    view_wview[view_current] = winWid;
    view_hview[view_current] = winHei;
    view_wport[view_current] = winWid;
    view_hport[view_current] = winHei;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update surface
if (surface_get_width(effectsSurface) != winWid || surface_get_height(effectsSurface) != winHei ||
    !surface_exists(effectsSurface))
{
    if (surface_exists(effectsSurface))
        surface_free(effectsSurface);
    
    effectsSurface = surface_create(winWid, winHei);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update UI
iui_update_io();

if (UIMsgCtr &gt; 0)
    UIMsgCtr--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop capturing the screen &amp; draw it
surface_reset_target();

draw_surface_stretched(effectsSurface, 0, 0, winWid, winHei);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update &amp; draw immediate mode UI
iui_begin();
/// ====================================================
///     UI vars
/// ====================================================
var _UI_OFF_X = 0, _UI_OFF_Y = 0;
var _UI_CENTER_X = winWid * 0.5, _UI_CENTER_Y = winHei * 0.5;
var _UI_MARGIN = 16 * UIScale;
var _UI_MARGIN2 = _UI_MARGIN * 2;
var _UI_MARGIN_COLUMN = 200 * UIScale;
var _UI_TAB_Y = _UI_OFF_Y + 6 * UIScale;
var _UI_TAB_HEI = 32;
var _UI_MENU_HEI = 128 * UIScale;
var _UI_CONTENT_X = _UI_OFF_X + _UI_MARGIN * 2;
var _UI_CONTENT_Y = _UI_TAB_Y + _UI_TAB_HEI;
var _UI_CURRENT_Y = _UI_CONTENT_Y;
var _UI_ALPHA = 1.0;

/// ====================================================
///     Tabs
/// ====================================================
UI_TAB_IDX = iui_tab(_UI_OFF_X, _UI_TAB_Y, 64, _UI_TAB_HEI, UI_TAB_ELEMENTS, UI_TAB_IDX, 2);

/// ====================================================
///     Tab-specific UI
/// ====================================================
switch (UI_TAB_IDX)
{
    case eTABS.MAIN:
        // var _titlestr = "BJÖRTFX#MMXX ZIK##IDK shdfjhsdfjshda";
        var _titlescale = UIScale * 2;
        var _titleheight = sprite_get_height(sprLogo) * _titlescale; // string_height(_titlestr) * _titlescale;
        var _strscale = UIScale;
        
        _UI_MENU_HEI = 128 * UIScale + _UI_MARGIN * 2; // _titleheight + _UI_MARGIN * 2;
        
        // Backdrop
        iui_rect(_UI_OFF_X, _UI_CURRENT_Y, winWid, _UI_MENU_HEI, UI_BASE_COL);
        _UI_CURRENT_Y += _UI_MARGIN;
    
        // Logo / Info
        // iui_align_push(fa_center, fa_top);
        // iui_label_transform(_UI_CENTER_X, _UI_CURRENT_Y, _titlestr, _titlescale, _titlescale, 0, c_white, 1.0);
        // iui_align_pop();
        var _logoosc = cos(current_time * 0.001 * pi);
        var _logoy = _UI_CURRENT_Y + _logoosc * 8 * UIScale;
        draw_sprite_ext(sprLogo, 0, _UI_CENTER_X, _logoy, _titlescale, _titlescale, 0, c_white, 1.0);
        
        // Preset pictures
        var _picname = "PRESET IMG. : " + string(demoBGIdx + 1);
        iui_align_push(fa_left, fa_top);
        iui_label_transform(_UI_CONTENT_X, _UI_CURRENT_Y, _picname, _strscale, _strscale, 0, UI_ACCENT_COL, 1.0);
        iui_align_pop();
        _UI_CURRENT_Y += _UI_MARGIN2;
        
        // Button
        var _buttonw = 32 * UIScale;
        var _buttonw2 = _buttonw * 2 + _UI_MARGIN;
        var _buttonh = 32 * UIScale;
        var _prev = iui_button(_UI_CONTENT_X, _UI_CURRENT_Y, _buttonw, _buttonh, "&lt;##PREV_BG");
        var _next = iui_button(_UI_CONTENT_X + _buttonw + _UI_MARGIN, _UI_CURRENT_Y, _buttonw, _buttonh, "&gt;##NEXT_BG");
        var _load = iui_button(_UI_CONTENT_X, _UI_CURRENT_Y + _buttonh + _UI_MARGIN, _buttonw2, _buttonh, "LOAD...##SET_BG");
        var _save = iui_button(winWid - _buttonw2 * 2 - _UI_MARGIN, _UI_CURRENT_Y, _buttonw2 * 2, _buttonh, "EXPORT IMG...##SET_BG");
        
        if (_prev || _next)
        {
            var _bgoffset = _next - _prev;
            var _bglistsz = array_length_1d(demoBGList);
            demoBGIdx = (demoBGIdx + _bgoffset + _bglistsz) % _bglistsz;
            demoState = eDEMO_STATE.DEFAULT;
        }
        
        if (_load)
        {
            // var _dir = get_open_filename_ext("image files|*.png;*.gif|*.jpg|*.jpeg", "", working_directory, "Select an image to load...");
            var _dir = get_open_filename_ext(".PNG image file|*.png", "", working_directory, "Select an image to load...");
            if (_dir != "" &amp;&amp; file_exists(_dir))
            {
                demoCustomBGDir = _dir;
                
                if (background_exists(demoCustomBG))
                    background_delete(demoCustomBG);
                demoCustomBG = background_add(_dir, false, false);
                
                if (background_exists(demoCustomBG))
                {
                    UIMsg = "SUCCESSFULLY LOADED THE IMAGE!";
                    UIMsgCtr = room_speed * 3.0;
                    demoState = eDEMO_STATE.CUSTOM;
                }
                else
                {
                    UIMsg = "UNABLE TO LOAD THE IMAGE!#(only .png formats are supported as of now)";
                    UIMsgCtr = room_speed * 3.0;
                    demoState = eDEMO_STATE.DEFAULT;
                }
            }
        }
        else if (_save)
        {
            var _dir = get_save_filename_ext(".PNG image file|*.png", "", working_directory, "Save image to where?");
            if (_dir != "")
            {
                surface_save(effectsSurface, _dir);
                UIMsg = "IMAGE EXPORTED!";
                UIMsgCtr = room_speed * 3.0;
            }
        }
        _UI_CURRENT_Y += _UI_MARGIN2;
        
        _UI_CURRENT_Y += _titleheight;
        break;
        
    case eTABS.CONFIG_SCREEN:
        var _itemx1 = _UI_CONTENT_X;
        var _itemx2 = _itemx1 + _UI_MARGIN_COLUMN;
        var _itemx3 = _itemx2 + _UI_MARGIN_COLUMN;
        
        var _sliderx1 = _itemx1 + 64 * UIScale;
        var _sliderx2 = _itemx2 + 64 * UIScale;
        var _sliderx3 = _itemx3 + 64 * UIScale;
        
        var _sliderw = 128 * UIScale;
        var _sliderhalfh = iuiSliderHHei * 0.5;
        var _titlescale = UIScale;
        var _strscale = UIScale * 0.5;
    
        // Update UI alpha
        if (!point_in_rectangle(iui_inputX, iui_inputY, _UI_OFF_X, _UI_CURRENT_Y, _UI_OFF_X + _sliderx3 + _UI_MARGIN_COLUMN, _UI_CURRENT_Y + _UI_MENU_HEI))
            _UI_ALPHA = 0.25;
    
        // Backdrop
        iui_rect_alpha(_UI_OFF_X, _UI_CURRENT_Y, _sliderx3 + _UI_MARGIN_COLUMN, _UI_MENU_HEI, UI_BASE_COL, _UI_ALPHA);
        // _UI_CURRENT_Y += _UI_MARGIN;
        
        /// 1st column
        /// CRT emulation params
        iui_align_push(fa_left, fa_top);
        iui_label_transform(_itemx1, _UI_CURRENT_Y, "CRT SCREEN", _titlescale, _titlescale, 0, c_white, _UI_ALPHA);
        _UI_CURRENT_Y += _UI_MARGIN2;
        iui_align_pop();
        
        // distortion intensity
        iui_align_push(fa_right, fa_middle);
        iui_label_transform(_sliderx1, _UI_CURRENT_Y + _sliderhalfh, "DISTORTION ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtDistortion = iui_slider_h(_sliderx1, _UI_CURRENT_Y, oBJORTFX.crtDistortion, _sliderw, -1, 2, "DISTORTION");
        _UI_CURRENT_Y += _UI_MARGIN;
        
        // reflection intensity
        iui_label_transform(_sliderx1, _UI_CURRENT_Y + _sliderhalfh, "REFLECTION ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtReflection = iui_slider_h(_sliderx1, _UI_CURRENT_Y, oBJORTFX.crtReflection, _sliderw, 0, 1, "REFLECTION");
        _UI_CURRENT_Y += _UI_MARGIN;
        
        // shadow mask intensity
        iui_label_transform(_sliderx1, _UI_CURRENT_Y + _sliderhalfh, "SHADOWMASK ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtShadowmask = iui_slider_h(_sliderx1, _UI_CURRENT_Y, oBJORTFX.crtShadowmask, _sliderw, 0, 1, "SHADOWMASK");
        _UI_CURRENT_Y += _UI_MARGIN;
        
        // downscale factor intensity
        var _tb_height = iuiSliderHHei + 8;
        iui_label_transform(_sliderx1, _UI_CURRENT_Y + _sliderhalfh, "DOWNSCALE ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        UI_DOWNSCALE_FACTOR = iui_textbox_numberonly(_sliderx1, _UI_CURRENT_Y - _tb_height * 0.5, _sliderw, _tb_height, UI_DOWNSCALE_FACTOR, "DOWNSCALE");
        _UI_CURRENT_Y += _UI_MARGIN;
        // iui_align_pop();
        
        /// (update values)
        var _input_factor = floor(real(UI_DOWNSCALE_FACTOR));
        if (_input_factor != oBJORTFX.surfaceDownscaleFactor)
        {
            oBJORTFX.surfaceDownscaleFactor = _input_factor;
            oBJORTFX.surfaceDownscaledWid = max(oBJORTFX.surfaceScreenWid &gt;&gt; _input_factor, 1);
            oBJORTFX.surfaceDownscaledHei = max(oBJORTFX.surfaceScreenHei &gt;&gt; _input_factor, 1);
        }
        
        /// 2nd column
        _UI_CURRENT_Y = _UI_CONTENT_Y + _UI_MARGIN2;
        
        // scanline
        // iui_align_push(fa_right, fa_middle);
        iui_label_transform(_sliderx2, _UI_CURRENT_Y + _sliderhalfh, "SCANLINE ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtScanline = iui_slider_h(_sliderx2, _UI_CURRENT_Y, oBJORTFX.crtScanline, _sliderw, 0, 1, "SCANLINE");
        _UI_CURRENT_Y += _UI_MARGIN;
        
        // colour bleed
        iui_label_transform(_sliderx2, _UI_CURRENT_Y + _sliderhalfh, "BLEED AMP. ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtBleed = iui_slider_h(_sliderx2, _UI_CURRENT_Y, oBJORTFX.crtBleed, _sliderw, 0, 1, "BLEED_AMP");
        _UI_CURRENT_Y += _UI_MARGIN;
        
        // colour bleed size
        iui_label_transform(_sliderx2, _UI_CURRENT_Y + _sliderhalfh, "BLEED SZ. ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtBleedSize = iui_slider_h(_sliderx2, _UI_CURRENT_Y, oBJORTFX.crtBleedSize, _sliderw, -128, 128, "BLEED_SZ");
        _UI_CURRENT_Y += _UI_MARGIN;
        // iui_align_pop();
        
        // dynamic colour tint
        iui_label_transform(_sliderx2, _UI_CURRENT_Y + _sliderhalfh, "COL. TINT ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtTint = iui_slider_h(_sliderx2, _UI_CURRENT_Y, oBJORTFX.crtTint, _sliderw, 0, 1, "TINT_AMP");
        _UI_CURRENT_Y += _UI_MARGIN;
        
        /// 3nd column
        _UI_CURRENT_Y = _UI_CONTENT_Y + _UI_MARGIN2;
        
        // vignette
        iui_label_transform(_sliderx3, _UI_CURRENT_Y + _sliderhalfh, "VIGNETTE ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtVignette = iui_slider_h(_sliderx3, _UI_CURRENT_Y, oBJORTFX.crtVignette, _sliderw, 0, 1, "VIGNETTE");
        _UI_CURRENT_Y += _UI_MARGIN;
        
        // film grain
        iui_label_transform(_sliderx3, _UI_CURRENT_Y + _sliderhalfh, "Film grain ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtFilmgrain = iui_slider_h(_sliderx3, _UI_CURRENT_Y, oBJORTFX.crtFilmgrain, _sliderw, 0, 1, "FILMGRAIN");
        _UI_CURRENT_Y += _UI_MARGIN;
        iui_align_pop();
        break;
        
    case eTABS.CONFIG_SCREEN2:
        var _itemx1 = _UI_CONTENT_X;
        var _itemx2 = _itemx1 + _UI_MARGIN_COLUMN;
        var _itemx3 = _itemx2 + _UI_MARGIN_COLUMN;
        
        var _sliderx1 = _itemx1 + 64 * UIScale;
        var _sliderx2 = _itemx2 + 64 * UIScale;
        var _sliderx3 = _itemx3 + 64 * UIScale;
        
        var _sliderw = 128 * UIScale;
        var _sliderhalfh = iuiSliderHHei * 0.5;
        var _titlescale = UIScale;
        var _strscale = UIScale * 0.5;
        
        // Update UI alpha
        if (!point_in_rectangle(iui_inputX, iui_inputY, _UI_OFF_X, _UI_CURRENT_Y, _UI_OFF_X + _sliderx3 + _UI_MARGIN_COLUMN, _UI_CURRENT_Y + _UI_MENU_HEI))
            _UI_ALPHA = 0.25;
        
        // Backdrop
        iui_rect_alpha(_UI_OFF_X, _UI_CURRENT_Y, _sliderx3 + _UI_MARGIN_COLUMN, _UI_MENU_HEI, UI_BASE_COL, _UI_ALPHA);
        // _UI_CURRENT_Y += _UI_MARGIN;
        
        /// CRT emulation params
        iui_align_push(fa_left, fa_top);
        iui_label_transform(_itemx1, _UI_CURRENT_Y, "COLOUR", _titlescale, _titlescale, 0, c_white, _UI_ALPHA);
        _UI_CURRENT_Y += _UI_MARGIN2;
        iui_align_pop();
        
        // brightness
        iui_align_push(fa_right, fa_middle);
        iui_label_transform(_sliderx1, _UI_CURRENT_Y + _sliderhalfh, "BRIGHTNESS ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtBrightness = iui_slider_h(_sliderx1, _UI_CURRENT_Y, oBJORTFX.crtBrightness, _sliderw, -1, 2, "BRIGHTNESS");
        _UI_CURRENT_Y += _UI_MARGIN;
        
        // contrast
        iui_label_transform(_sliderx1, _UI_CURRENT_Y + _sliderhalfh, "CONTRAST ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtContrast = iui_slider_h(_sliderx1, _UI_CURRENT_Y, oBJORTFX.crtContrast, _sliderw, 0, 2, "CONTRAST");
        _UI_CURRENT_Y += _UI_MARGIN;
        iui_align_pop();
        
        /// Specular light
        _UI_CURRENT_Y = _UI_CONTENT_Y;
        iui_align_push(fa_left, fa_top);
        iui_label_transform(_itemx2, _UI_CURRENT_Y, "SCREEN SPECULAR", _titlescale, _titlescale, 0, c_white, _UI_ALPHA);
        _UI_CURRENT_Y += _UI_MARGIN2;
        iui_align_pop();
        
        // red
        iui_align_push(fa_right, fa_middle);
        iui_label_transform(_sliderx2, _UI_CURRENT_Y + _sliderhalfh, "R ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtSpecularR = iui_slider_h(_sliderx2, _UI_CURRENT_Y, oBJORTFX.crtSpecularR, _sliderw, 0, 1, "RED");
        _UI_CURRENT_Y += _UI_MARGIN;
        
        // green
        iui_label_transform(_sliderx2, _UI_CURRENT_Y + _sliderhalfh, "G ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtSpecularG = iui_slider_h(_sliderx2, _UI_CURRENT_Y, oBJORTFX.crtSpecularG, _sliderw, 0, 1, "GRN");
        _UI_CURRENT_Y += _UI_MARGIN;
        
        // blue
        iui_label_transform(_sliderx2, _UI_CURRENT_Y + _sliderhalfh, "B ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtSpecularB = iui_slider_h(_sliderx2, _UI_CURRENT_Y, oBJORTFX.crtSpecularB, _sliderw, 0, 1, "BLU");
        _UI_CURRENT_Y += _UI_MARGIN;
        
        // amplitude
        iui_label_transform(_sliderx2, _UI_CURRENT_Y + _sliderhalfh, "AMP. ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtSpecularAmp = iui_slider_h(_sliderx2, _UI_CURRENT_Y, oBJORTFX.crtSpecularAmp, _sliderw, 0, 1, "SPECULAR_AMP");
        _UI_CURRENT_Y += _UI_MARGIN;
        // iui_align_pop();
        
        /// Specular light : position
        _UI_CURRENT_Y = _UI_CONTENT_Y + _UI_MARGIN2;
        
        // red
        // iui_align_push(fa_right, fa_middle);
        iui_label_transform(_sliderx3, _UI_CURRENT_Y + _sliderhalfh, "X OFF. ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtSpecularOffX = iui_slider_h(_sliderx3, _UI_CURRENT_Y, oBJORTFX.crtSpecularOffX, _sliderw, -1, 1, "SPECULAR_X");
        _UI_CURRENT_Y += _UI_MARGIN;
        
        // green
        iui_label_transform(_sliderx3, _UI_CURRENT_Y + _sliderhalfh, "Y OFF. ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtSpecularOffY = iui_slider_h(_sliderx3, _UI_CURRENT_Y, oBJORTFX.crtSpecularOffY, _sliderw, -1, 1, "SPECULAR_Y");
        _UI_CURRENT_Y += _UI_MARGIN;
        iui_align_pop();
        break;
        
    case eTABS.CONFIG_POSTFX:
        var _itemx1 = _UI_CONTENT_X;
        var _itemx2 = _itemx1 + _UI_MARGIN_COLUMN;
        var _itemx3 = _itemx2 + _UI_MARGIN_COLUMN;
        
        var _sliderx1 = _itemx1 + 64 * UIScale;
        var _sliderx2 = _itemx2 + 64 * UIScale;
        var _sliderx3 = _itemx3 + 64 * UIScale;
        
        var _sliderw = 128 * UIScale;
        var _sliderhalfh = iuiSliderHHei * 0.5;
        var _titlescale = UIScale;
        var _strscale = UIScale * 0.5;
        
        // Update UI alpha
        if (!point_in_rectangle(iui_inputX, iui_inputY, _UI_OFF_X, _UI_CURRENT_Y, _UI_OFF_X + _itemx2, _UI_CURRENT_Y + _UI_MENU_HEI))
            _UI_ALPHA = 0.25;
        
        // Backdrop
        iui_rect_alpha(_UI_OFF_X, _UI_CURRENT_Y, _itemx2, _UI_MENU_HEI, UI_BASE_COL, _UI_ALPHA);
        
        /// Final FX configs
        iui_align_push(fa_left, fa_top);
        iui_label_transform(_itemx1, _UI_CURRENT_Y, "FINAL FX.", _titlescale, _titlescale, 0, c_white, _UI_ALPHA);
        _UI_CURRENT_Y += _UI_MARGIN2;
        iui_align_pop();
        
        // glow factor
        iui_align_push(fa_right, fa_middle);
        iui_label_transform(_sliderx1, _UI_CURRENT_Y + _sliderhalfh, "GLOW FACTOR ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtGlowFactor = iui_slider_h(_sliderx1, _UI_CURRENT_Y, oBJORTFX.crtGlowFactor, _sliderw, 0, 1, "GLOW_AMP");
        _UI_CURRENT_Y += _UI_MARGIN;
        
        // glow's colour tint amount
        iui_label_transform(_sliderx1, _UI_CURRENT_Y + _sliderhalfh, "GLOW TINT ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtGlowTint = iui_slider_h(_sliderx1, _UI_CURRENT_Y, oBJORTFX.crtGlowTint, _sliderw, 0, 1, "GLOW_TINT");
        _UI_CURRENT_Y += _UI_MARGIN;
        
        // blur size
        iui_label_transform(_sliderx1, _UI_CURRENT_Y + _sliderhalfh, "BLUR SIZE ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtBlurSize = iui_slider_h(_sliderx1, _UI_CURRENT_Y, oBJORTFX.crtBlurSize, _sliderw, 0, 32, "BLUR_SZ");
        _UI_CURRENT_Y += _UI_MARGIN;
        
        // blur zoom amount
        iui_label_transform(_sliderx1, _UI_CURRENT_Y + _sliderhalfh, "BLUR ZOOM ", _strscale, _strscale, 0, UI_ACCENT_COL, _UI_ALPHA);
        _UI_CURRENT_Y += 8 * UIScale;
        oBJORTFX.crtBlurZoom = iui_slider_h(_sliderx1, _UI_CURRENT_Y, oBJORTFX.crtBlurZoom, _sliderw, 0, 1, "BLUR_ZOOM");
        _UI_CURRENT_Y += _UI_MARGIN;
        iui_align_pop();
        break;
}

/// UI Message
if (UIMsgCtr &gt; 0)
{
    var _msgscale = 3 * UIScale;
    iui_align_center();
    iui_label_shadow(_UI_CENTER_X, winHei * 0.8, UIMsg, iuPiss, _msgscale, _msgscale, c_black);
    iui_align_pop();
}

iui_end();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="74">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Begin capturing the screen with filter applied
surface_set_target(effectsSurface);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw contents
switch (demoState)
{
    case eDEMO_STATE.DEFAULT:
        demoBGCurrent = demoBGList[@ demoBGIdx];
        
        if (background_exists(demoBGCurrent))
        {
            draw_clear(c_black);
            
            var _bgwid = background_get_width(demoBGCurrent);
            var _bghei = background_get_height(demoBGCurrent);
            var _bgscale = min(winWid / _bgwid, winHei / _bghei);
            _bgwid *= _bgscale;
            _bghei *= _bgscale;
            var _bgx = (winWid - _bgwid) * 0.5;
            var _bgy = (winHei - _bghei) * 0.5;
            draw_background_stretched(demoBGCurrent, _bgx, _bgy, _bgwid, _bghei);
        }
        else
        {
            /// Draw default attraction graphics
            var _tex_dithermap = sprite_get_texture(texBluenoise, 0);
            
            shader_set(shd_misc_bg);
            
            // Set uniform
            var _u_time = shader_get_uniform(shd_misc_bg, "uTime");
            var _u_resolution = shader_get_uniform(shd_misc_bg, "uScreenResolution");
            var _samp_dither = shader_get_sampler_index(shd_misc_bg, "uBayer");
            shader_set_uniform_f(_u_time, current_time * 0.001);
            shader_set_uniform_f(_u_resolution, oBJORTFX.surfaceDownscaledWid, oBJORTFX.surfaceDownscaledHei);
            texture_set_stage(_samp_dither, _tex_dithermap);
            
            // Draw primitive : fullscreen quad for shader based background
            draw_primitive_begin_texture(pr_trianglestrip, -1);
            draw_vertex_texture(0, 0, 0, 0);
            draw_vertex_texture(winWid, 0, 1, 0);
            draw_vertex_texture(0, winHei, 0, 1);
            draw_vertex_texture(winWid, winHei, 1, 1);
            draw_primitive_end();
            shader_reset();
            
            // Draw logo
            var _logot = current_time * 0.001 * pi;
            var _logoscale = 2.0 * UIScale;
            var _logooscampx = winWid * 0.5;
            var _logooscampy = winHei * 0.5;
            var _logox = (winWid + cos(_logot) * _logooscampx) * 0.5;
            var _logoy = (winHei - sin(_logot) * _logooscampy - sprite_get_height(sprLogo) * _logoscale) * 0.5;
            draw_sprite_ext(sprLogo, 0, _logox + 16, _logoy + 16, _logoscale, _logoscale, sin(_logot) * 4, c_black, 0.5);
            draw_sprite_ext(sprLogo, 0, _logox, _logoy, _logoscale, _logoscale, sin(_logot) * 4, c_white, 1.0);
        }
        break;
        
    case eDEMO_STATE.CUSTOM:
        var _bg = demoCustomBG;
        var _bgwid = background_get_width(_bg);
        var _bghei = background_get_height(_bg);
        var _bgscale = min(winWid / _bgwid, winHei / _bghei);
        _bgwid *= _bgscale;
        _bghei *= _bgscale;
        var _bgx = (winWid - _bgwid) * 0.5;
        var _bgy = (winHei - _bghei) * 0.5;
        draw_background_ext(_bg, _bgx, _bgy, _bgscale, _bgscale, 0, c_white, 1.0);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
